// Generated by gencpp from file struct_with_variable_length_vector/imgData.msg
// DO NOT EDIT!


#ifndef STRUCT_WITH_VARIABLE_LENGTH_VECTOR_MESSAGE_IMGDATA_H
#define STRUCT_WITH_VARIABLE_LENGTH_VECTOR_MESSAGE_IMGDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace struct_with_variable_length_vector
{
template <class ContainerAllocator>
struct imgData_
{
  typedef imgData_<ContainerAllocator> Type;

  imgData_()
    : label()
    , size(0)
    , stride(0)
    , dataOffset(0)
    , Data()  {
      Data.assign(0);
  }
  imgData_(const ContainerAllocator& _alloc)
    : label(_alloc)
    , size(0)
    , stride(0)
    , dataOffset(0)
    , Data()  {
  (void)_alloc;
      Data.assign(0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _label_type;
  _label_type label;

   typedef int16_t _size_type;
  _size_type size;

   typedef int16_t _stride_type;
  _stride_type stride;

   typedef int16_t _dataOffset_type;
  _dataOffset_type dataOffset;

   typedef boost::array<int16_t, 4>  _Data_type;
  _Data_type Data;




  typedef boost::shared_ptr< ::struct_with_variable_length_vector::imgData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::struct_with_variable_length_vector::imgData_<ContainerAllocator> const> ConstPtr;

}; // struct imgData_

typedef ::struct_with_variable_length_vector::imgData_<std::allocator<void> > imgData;

typedef boost::shared_ptr< ::struct_with_variable_length_vector::imgData > imgDataPtr;
typedef boost::shared_ptr< ::struct_with_variable_length_vector::imgData const> imgDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::struct_with_variable_length_vector::imgData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::struct_with_variable_length_vector::imgData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace struct_with_variable_length_vector

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'struct_with_variable_length_vector': ['/home/schwarmcyc/Documents/HackMD-tutorial/dit_ws/src/struct_with_variable_length_vector/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::struct_with_variable_length_vector::imgData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::struct_with_variable_length_vector::imgData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::struct_with_variable_length_vector::imgData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::struct_with_variable_length_vector::imgData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::struct_with_variable_length_vector::imgData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::struct_with_variable_length_vector::imgData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::struct_with_variable_length_vector::imgData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3703bb6d4603050f488eafae4154849";
  }

  static const char* value(const ::struct_with_variable_length_vector::imgData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3703bb6d4603050ULL;
  static const uint64_t static_value2 = 0xf488eafae4154849ULL;
};

template<class ContainerAllocator>
struct DataType< ::struct_with_variable_length_vector::imgData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "struct_with_variable_length_vector/imgData";
  }

  static const char* value(const ::struct_with_variable_length_vector::imgData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::struct_with_variable_length_vector::imgData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string label\n\
int16 size\n\
int16 stride\n\
int16 dataOffset\n\
int16[4] Data\n\
";
  }

  static const char* value(const ::struct_with_variable_length_vector::imgData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::struct_with_variable_length_vector::imgData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.size);
      stream.next(m.stride);
      stream.next(m.dataOffset);
      stream.next(m.Data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imgData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::struct_with_variable_length_vector::imgData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::struct_with_variable_length_vector::imgData_<ContainerAllocator>& v)
  {
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.label);
    s << indent << "size: ";
    Printer<int16_t>::stream(s, indent + "  ", v.size);
    s << indent << "stride: ";
    Printer<int16_t>::stream(s, indent + "  ", v.stride);
    s << indent << "dataOffset: ";
    Printer<int16_t>::stream(s, indent + "  ", v.dataOffset);
    s << indent << "Data[]" << std::endl;
    for (size_t i = 0; i < v.Data.size(); ++i)
    {
      s << indent << "  Data[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.Data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // STRUCT_WITH_VARIABLE_LENGTH_VECTOR_MESSAGE_IMGDATA_H
