// Generated by gencpp from file struct_with_variable_length_vector/imgDataArray.msg
// DO NOT EDIT!


#ifndef STRUCT_WITH_VARIABLE_LENGTH_VECTOR_MESSAGE_IMGDATAARRAY_H
#define STRUCT_WITH_VARIABLE_LENGTH_VECTOR_MESSAGE_IMGDATAARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <struct_with_variable_length_vector/imgData.h>

namespace struct_with_variable_length_vector
{
template <class ContainerAllocator>
struct imgDataArray_
{
  typedef imgDataArray_<ContainerAllocator> Type;

  imgDataArray_()
    : images()  {
    }
  imgDataArray_(const ContainerAllocator& _alloc)
    : images(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::struct_with_variable_length_vector::imgData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::struct_with_variable_length_vector::imgData_<ContainerAllocator> >::other >  _images_type;
  _images_type images;




  typedef boost::shared_ptr< ::struct_with_variable_length_vector::imgDataArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::struct_with_variable_length_vector::imgDataArray_<ContainerAllocator> const> ConstPtr;

}; // struct imgDataArray_

typedef ::struct_with_variable_length_vector::imgDataArray_<std::allocator<void> > imgDataArray;

typedef boost::shared_ptr< ::struct_with_variable_length_vector::imgDataArray > imgDataArrayPtr;
typedef boost::shared_ptr< ::struct_with_variable_length_vector::imgDataArray const> imgDataArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::struct_with_variable_length_vector::imgDataArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::struct_with_variable_length_vector::imgDataArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace struct_with_variable_length_vector

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'struct_with_variable_length_vector': ['/home/schwarmcyc/Documents/HackMD-tutorial/dit_ws/src/struct_with_variable_length_vector/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::struct_with_variable_length_vector::imgDataArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::struct_with_variable_length_vector::imgDataArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::struct_with_variable_length_vector::imgDataArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::struct_with_variable_length_vector::imgDataArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::struct_with_variable_length_vector::imgDataArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::struct_with_variable_length_vector::imgDataArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::struct_with_variable_length_vector::imgDataArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33ef5e3553d4634610bed239b5d40f16";
  }

  static const char* value(const ::struct_with_variable_length_vector::imgDataArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33ef5e3553d46346ULL;
  static const uint64_t static_value2 = 0x10bed239b5d40f16ULL;
};

template<class ContainerAllocator>
struct DataType< ::struct_with_variable_length_vector::imgDataArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "struct_with_variable_length_vector/imgDataArray";
  }

  static const char* value(const ::struct_with_variable_length_vector::imgDataArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::struct_with_variable_length_vector::imgDataArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imgData[] images\n\
\n\
================================================================================\n\
MSG: struct_with_variable_length_vector/imgData\n\
string label\n\
int16 size\n\
int16 stride\n\
int16 dataOffset\n\
int16[4] Data\n\
";
  }

  static const char* value(const ::struct_with_variable_length_vector::imgDataArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::struct_with_variable_length_vector::imgDataArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.images);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imgDataArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::struct_with_variable_length_vector::imgDataArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::struct_with_variable_length_vector::imgDataArray_<ContainerAllocator>& v)
  {
    s << indent << "images[]" << std::endl;
    for (size_t i = 0; i < v.images.size(); ++i)
    {
      s << indent << "  images[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::struct_with_variable_length_vector::imgData_<ContainerAllocator> >::stream(s, indent + "    ", v.images[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // STRUCT_WITH_VARIABLE_LENGTH_VECTOR_MESSAGE_IMGDATAARRAY_H
